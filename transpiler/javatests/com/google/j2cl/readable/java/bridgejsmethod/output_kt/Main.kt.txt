// Generated from "bridgejsmethod/Main.java"
@file:OptIn(ExperimentalObjCName::class)

package bridgejsmethod

import javaemul.lang.*
import bridgejsmethod.Main
import kotlin.Any
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("BridgejsmethodMain", exact = true)
open class Main {
 companion object {
  @JvmStatic
  fun test() {
   val a: Main.A<Any?>? = Main.A<Int?>() as Main.A<Any?>?
   a!!.`fun`(Int.valueOf(1))
   a!!.bar(Int.valueOf(1))
   val b: Main.B? = Main.B()
   b!!.`fun`("abc")
   b!!.bar("abc")
   val c: Main.C? = Main.C()
   c!!.`fun`(Int.valueOf(1))
   c!!.bar(Int.valueOf(1))
   val d: Main.D? = Main.D()
   d!!.`fun`(Int.valueOf(1))
   d!!.bar(Int.valueOf(1))
   val e: Main.E? = Main.E()
   e!!.`fun`("abc")
   e!!.bar("abc")
   val h: Main.H<Int?>? = Main.H<Int?>()
   h!!.enclose(Int.valueOf(1))
   val l: Main.L<Int?>? = Main.L<Int?>()
   l!!.fun_pp_bridgejsmethod("foo", Int.valueOf(1))
  }
 }

 @ObjCName("BridgejsmethodMain_A", exact = true)
 open class A<T> {
  open fun `fun`(
   @ObjCName("withId", exact = false) t: T
  ): T {
   return t
  }

  open fun bar(
   @ObjCName("withId", exact = false) t: T
  ) {}
 }

 @ObjCName("BridgejsmethodMain_I", exact = true)
 fun interface I<T: Number?> {
  fun `fun`(
   @ObjCName("withNSNumber", exact = false) t: T
  ): T
 }

 @ObjCName("BridgejsmethodMain_J", exact = true)
 fun interface J<T> {
  fun bar(
   @ObjCName("withId", exact = false) t: T
  )
 }

 @ObjCName("BridgejsmethodMain_B", exact = true)
 open class B: Main.A<String?>() {
  open override fun `fun`(s: String?): String? {
   return s
  }

  open override fun bar(s: String?) {}
 }

 @ObjCName("BridgejsmethodMain_C", exact = true)
 open class C: Main.A<Int?>() {
  open override fun `fun`(i: Int?): Int? {
   return i
  }
 }

 @ObjCName("BridgejsmethodMain_D", exact = true)
 open class D: Main.A<Int?>(), Main.I<Int?> {
  open override fun `fun`(i: Int?): Int? {
   return i
  }
 }

 @ObjCName("BridgejsmethodMain_E", exact = true)
 open class E: Main.B(), Main.J<String?> {}

 @ObjCName("BridgejsmethodMain_F", exact = true)
 open class F: Main.A<Int?>(), Main.I<Int?> {}

 @ObjCName("BridgejsmethodMain_G", exact = true)
 fun interface G<V> {
  fun enclose(
   @ObjCName("withId", exact = false) value: V
  ): V
 }

 @ObjCName("BridgejsmethodMain_H", exact = true)
 open class H<V>: Main.G<V> {
  open override fun enclose(value: V): V {
   return null as V
  }
 }

 @ObjCName("BridgejsmethodMain_K", exact = true)
 open class K<K1, K2> {
  open fun fun_pp_bridgejsmethod(k1: K1, k2: K2) {}
 }

 @ObjCName("BridgejsmethodMain_L", exact = true)
 open class L<L1>: Main.K<String?, L1>() {
  open override fun fun_pp_bridgejsmethod(string: String?, l1: L1) {}
 }

 fun interface M {
  fun getB(): Main.B?
 }

 abstract inner class N: Main.M {
  constructor()

  abstract override fun getB(): Main.B?
 }

 open inner class O: Main.N() {
  @JvmField var b_private_3: Main.B? = null

  open override fun getB(): Main.B? {
   return this.b_private_3
  }
 }

 fun interface P {
  fun getKey(): String?
 }

 abstract inner class Q: Main.P {
  abstract override fun getKey(): String?
 }

 abstract inner class R: Main.Q() {
  open override fun getKey(): String? {
   return null
  }
 }

 open inner class S: Main.R() {}

 open inner class GrandParent<T> {
  open fun jsMethod(
   @ObjCName("withId", exact = false) t: T
  ) {}

  open fun method(
   @ObjCName("withId", exact = false) t: T
  ) {}
 }

 open inner class Parent<T: Main.Parent<T>?>: Main.GrandParent<T>() {
  open override fun jsMethod(t: T) {}

  open override fun method(t: T) {}
 }

 open inner class Child: Main.Parent<Main.Child?>() {}
}
