goog.module('objcnamemethod.ObjCNameMethod$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Long = goog.forwardDeclare('nativebootstrap.Long$impl');
let Foo = goog.forwardDeclare('objcnamemethod.Foo$impl');

class ObjCNameMethod extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 //Factory method corresponding to constructor 'ObjCNameMethod()'.
 /** @nodts @return {!ObjCNameMethod} */
 static $create__() {
  ObjCNameMethod.$clinit();
  let $instance = new ObjCNameMethod();
  $instance.$ctor__objcnamemethod_ObjCNameMethod__void();
  return $instance;
 }
 //Initialization from constructor 'ObjCNameMethod()'.
 /** @nodts */
 $ctor__objcnamemethod_ObjCNameMethod__void() {
  this.$ctor__java_lang_Object__void();
 }
 //Factory method corresponding to constructor 'ObjCNameMethod(int)'.
 /** @nodts @return {!ObjCNameMethod} */
 static $create__int(/** number */ i) {
  ObjCNameMethod.$clinit();
  let $instance = new ObjCNameMethod();
  $instance.$ctor__objcnamemethod_ObjCNameMethod__int__void(i);
  return $instance;
 }
 //Initialization from constructor 'ObjCNameMethod(int)'.
 /** @nodts */
 $ctor__objcnamemethod_ObjCNameMethod__int__void(/** number */ i) {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts */
 m_instanceMethod__int__void(/** number */ i) {}
 /** @nodts */
 m_instanceMethod__int__arrayOf_long__void(/** number */ i, /** Array<!$Long> */ l) {}
 /** @nodts */
 m_instanceMethod__int__arrayOf_arrayOf_long__void(/** number */ i, /** Array<Array<!$Long>> */ l) {}
 /** @nodts */
 m_instanceMethod__objcnamemethod_Foo__void(/** Foo */ foo) {}
 /** @nodts */
 static m_main__arrayOf_java_lang_String__void(/** Array<?string> */ args) {
  ObjCNameMethod.$clinit();
 }
 /** @nodts */
 static $clinit() {
  ObjCNameMethod.$clinit = () =>{};
  ObjCNameMethod.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof ObjCNameMethod;
 }
 
 /** @nodts */
 static $loadModules() {}
}
$Util.$setClassMetadata(ObjCNameMethod, 'objcnamemethod.ObjCNameMethod');

exports = ObjCNameMethod;

//# sourceMappingURL=ObjCNameMethod.js.map
