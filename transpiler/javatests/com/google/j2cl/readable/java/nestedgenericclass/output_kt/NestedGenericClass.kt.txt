// Generated from "nestedgenericclass/NestedGenericClass.java"
@file:OptIn(ExperimentalObjCName::class)

package nestedgenericclass

import javaemul.lang.*
import kotlin.Any
import kotlin.Error
import kotlin.Exception
import kotlin.Number
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName
import nestedgenericclass.NestedGenericClass

@ObjCName("NestedgenericclassNestedGenericClass", exact = true)
open class NestedGenericClass<T> {
 open fun <S> `fun`(
  @ObjCName("withId", exact = false) t: S
 ) {
  open class ___1E<S> {}
  open class ___1F {
   @JvmField var f: S = null as S
  }
  ___1E<Number?>()
  ___1F()
 }

 open fun <T_1> bar() {
  open class ___1G<T> {
   open fun <T_1> bar() {
    open class ___1H<T> {}
    ___1H<Number?>()
   }
  }
  ___1G<Error?>().bar<Any?>()
 }

 open fun test() {
  val n: NestedGenericClass<Number?>? = NestedGenericClass<Number?>()
  val a: NestedGenericClass<Number?>.A<Error?>? = n!!.A<Error?>()
  val b: NestedGenericClass<Number?>.A<Error?>.B<Exception?>? = a!!.B<Exception?>()
  n!!.C()
  n!!.C().D()
 }

 @ObjCName("NestedgenericclassNestedGenericClass_A", exact = true)
 open inner class A<T> {
  @ObjCName("NestedgenericclassNestedGenericClass_A_B", exact = true)
  open inner class B<T> {
   constructor()
  }
 }

 @ObjCName("NestedgenericclassNestedGenericClass_C", exact = true)
 open inner class C {
  @JvmField var c: T = null as T

  @ObjCName("NestedgenericclassNestedGenericClass_C_D", exact = true)
  open inner class D {
   @JvmField var d: T = null as T
  }
 }

 open inner class RecursiveTypeVariable<T: NestedGenericClass<T>.RecursiveTypeVariable<T>?> {
  open fun test_pp_nestedgenericclass() {
   val t: T? = null
   t!!.Inner()
  }

  open inner class Inner {}
 }
}
