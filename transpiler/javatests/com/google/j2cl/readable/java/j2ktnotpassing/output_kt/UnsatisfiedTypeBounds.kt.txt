// Generated from "j2ktnotpassing/UnsatisfiedTypeBounds.java"
@file:OptIn(ExperimentalObjCName::class)

package j2ktnotpassing

import javaemul.lang.*
import j2ktnotpassing.UnsatisfiedTypeBounds
import kotlin.Any
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic

open class UnsatisfiedTypeBounds {
 companion object {
  @JvmStatic
  fun <T: Any> methodWithTypeConstraints_pp_j2ktnotpassing(helper: UnsatisfiedTypeBounds.Helper<T>, foo: UnsatisfiedTypeBounds.Foo<out T>): T {
   return foo!!.get()
  }

  @JvmStatic
  fun test_pp_j2ktnotpassing() {
   val command: UnsatisfiedTypeBounds.Command? = UnsatisfiedTypeBounds.methodWithTypeConstraints_pp_j2ktnotpassing<UnsatisfiedTypeBounds.Command>(UnsatisfiedTypeBounds.Helper<UnsatisfiedTypeBounds.Command>(), UnsatisfiedTypeBounds.FooCommand())
  }
 }

 fun interface Foo<T: UnsatisfiedTypeBounds.Foo<T>> {
  fun get(): T
 }

 interface Command {}

 open class FooCommand: UnsatisfiedTypeBounds.Foo<UnsatisfiedTypeBounds.FooCommand>, UnsatisfiedTypeBounds.Command {
  open override fun get(): UnsatisfiedTypeBounds.FooCommand {
   return this
  }
 }

 class Helper<T: Any> {}
}
