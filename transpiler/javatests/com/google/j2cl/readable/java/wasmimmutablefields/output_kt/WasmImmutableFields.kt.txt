// Generated from "wasmimmutablefields/WasmImmutableFields.java"
@file:OptIn(ExperimentalObjCName::class)

package wasmimmutablefields

import javaemul.lang.*
import java.lang.Class
import kotlin.Any
import kotlin.Array
import kotlin.Int
import kotlin.IntArray
import kotlin.OptIn
import kotlin.Short
import kotlin.String
import kotlin.arrayOf
import kotlin.arrayOfNulls
import kotlin.experimental.ExperimentalObjCName
import kotlin.intArrayOf
import kotlin.jvm.JvmField
import kotlin.jvm.javaObjectType
import kotlin.native.ObjCName
import wasmimmutablefields.AssignmentsInConstructor
import wasmimmutablefields.FinalizerTest
import wasmimmutablefields.OptimizesWithThisConstructorDelegation
import wasmimmutablefields.WasmImmutableFields

@ObjCName("WasmimmutablefieldsWasmImmutableFields", exact = true)
open class WasmImmutableFields {}

open class AssignmentsInDeclaration {
 @JvmField var compileTimeConstant_pp_wasmimmutablefields: Int = 12

 @JvmField var stringLiteral_pp_wasmimmutablefields: String? = "Hello World"

 @JvmField var newArray_pp_wasmimmutablefields: Array<Any?>? = arrayOfNulls<Any>(4)

 @JvmField var newArrayMultidimensional_pp_wasmimmutablefields: Array<Array<Array<Any?>?>?>? = Array<Array<Array<Any?>?>?>(3) {
  arrayOfNulls<Array<Any?>>(4)
 }

 @JvmField var arrayLiteral_pp_wasmimmutablefields: IntArray? = intArrayOf(1, 2, 3, 4)

 @JvmField var arrayLiteralMultidimensional_pp_wasmimmutablefields: Array<IntArray?>? = arrayOf<IntArray?>(intArrayOf(1, 2), intArrayOf(3, 4))

 @JvmField var classLiteral_pp_wasmimmutablefields: Class<*>? = WasmImmutableFields::class.javaObjectType

 @JvmField var withCast_pp_wasmimmutablefields: Array<String?>? = (arrayOfNulls<Any>(0) as Any?) as Array<String?>?
}

open class AssignmentsInInitializer {
 @JvmField var compileTimeConstant_pp_wasmimmutablefields: Int = 0

 @JvmField var stringLiteral_pp_wasmimmutablefields: String? = null

 @JvmField var newArray_pp_wasmimmutablefields: Array<Any?>? = null

 @JvmField var newArrayMultidimensional_pp_wasmimmutablefields: Array<Array<Array<Any?>?>?>? = null

 @JvmField var arrayLiteral_pp_wasmimmutablefields: IntArray? = null

 @JvmField var arrayLiteralMultidimensional_pp_wasmimmutablefields: Array<IntArray?>? = null

 @JvmField var classLiteral_pp_wasmimmutablefields: Class<*>? = null

 @JvmField var withCast_pp_wasmimmutablefields: Array<String?>? = null

 init {
  this.compileTimeConstant_pp_wasmimmutablefields = 12
  this.stringLiteral_pp_wasmimmutablefields = "Hello World"
  this.newArray_pp_wasmimmutablefields = arrayOfNulls<Any>(4)
  this.newArrayMultidimensional_pp_wasmimmutablefields = Array<Array<Array<Any?>?>?>(3) {
   arrayOfNulls<Array<Any?>>(4)
  }
  this.arrayLiteral_pp_wasmimmutablefields = intArrayOf(1, 2, 3, 4)
  this.arrayLiteralMultidimensional_pp_wasmimmutablefields = arrayOf<IntArray?>(intArrayOf(1, 2), intArrayOf(3, 4))
  this.classLiteral_pp_wasmimmutablefields = WasmImmutableFields::class.javaObjectType
  this.withCast_pp_wasmimmutablefields = (arrayOfNulls<Any>(0) as Any?) as Array<String?>?
 }
}

open class AssignmentsInConstructor {
 @JvmField var compileTimeConstant_pp_wasmimmutablefields: Int = 0

 @JvmField var stringLiteral_pp_wasmimmutablefields: String? = null

 @JvmField var newArray_pp_wasmimmutablefields: Array<Any?>? = null

 @JvmField var newArrayMultidimensional_pp_wasmimmutablefields: Array<Array<Array<Any?>?>?>? = null

 @JvmField var arrayLiteral_pp_wasmimmutablefields: IntArray? = null

 @JvmField var arrayLiteralMultidimensional_pp_wasmimmutablefields: Array<IntArray?>? = null

 @JvmField var classLiteral_pp_wasmimmutablefields: Class<*>? = null

 @JvmField var withCast_pp_wasmimmutablefields: Array<String?>? = null

 @JvmField var fromParameter_pp_wasmimmutablefields: Any? = null

 @JvmField var finalFieldReference_pp_wasmimmutablefields: String? = null

 constructor(parameter: Any?, intParameter: Int, par: AssignmentsInConstructor?) {
  this.compileTimeConstant_pp_wasmimmutablefields = 12
  this.stringLiteral_pp_wasmimmutablefields = "Hello World"
  this.newArray_pp_wasmimmutablefields = arrayOfNulls<Any>(intParameter)
  this.newArrayMultidimensional_pp_wasmimmutablefields = Array<Array<Array<Any?>?>?>(intParameter) {
   arrayOfNulls<Array<Any?>>(4)
  }
  this.arrayLiteral_pp_wasmimmutablefields = intArrayOf(1, 2, intParameter, 4)
  this.arrayLiteralMultidimensional_pp_wasmimmutablefields = arrayOf<IntArray?>(intArrayOf(1, intParameter), intArrayOf(3, 4))
  this.classLiteral_pp_wasmimmutablefields = WasmImmutableFields::class.javaObjectType
  this.withCast_pp_wasmimmutablefields = (arrayOfNulls<Any>(0) as Any?) as Array<String?>?
  this.fromParameter_pp_wasmimmutablefields = parameter
  this.finalFieldReference_pp_wasmimmutablefields = par!!.stringLiteral_pp_wasmimmutablefields
 }
}

open class OptimizesWithThisConstructorDelegation {
 @JvmField var optimizeableField_pp_wasmimmutablefields: Int = 0

 constructor() {
  this.optimizeableField_pp_wasmimmutablefields = 2
 }

 constructor(parameter: Int) {
  this.optimizeableField_pp_wasmimmutablefields = parameter
 }

 constructor(parameter: Short): this(parameter.toInt())
}

open class OptimizesWithSuperConstructorDelegation: OptimizesWithThisConstructorDelegation {
 constructor()

 constructor(parameter: Int): super(parameter)

 constructor(parameter: Short): this(parameter.toInt())
}

open class FinalizerTest {
 @JvmField var effectivelyFinalField_pp_wasmimmutablefields: Int = 1

 @JvmField var readInInit_pp_wasmimmutablefields: Int = this.effectivelyFinalField_pp_wasmimmutablefields

 @JvmField var writtenOutsideConstructor_pp_wasmimmutablefields: Int = 1

 @JvmField var readBeforeWrite_pp_wasmimmutablefields: Int = 0

 @JvmField var writtenInDelegatingConstructor_pp_wasmimmutablefields: Int = 1

 @JvmField var compoundAssignment_pp_wasmimmutablefields: Int = 0

 @JvmField var effectivelyFinalButNotOptimizedIfBranches_pp_wasmimmutablefields: Int = 0

 @JvmField var effectivelyFinalButNotOptimizedNestedBlock_pp_wasmimmutablefields: Int = 0

 @JvmField var writtenInInitAndConstructor_pp_wasmimmutablefields: Int = 1

 @JvmField var writtenInInitializerAndInDelegatingConstructor_pp_wasmimmutablefields: Int = 1

 @JvmField var writtenOnlyInDelegatingConstructor_pp_wasmimmutablefields: Int = 0

 constructor() {
  this.readBeforeWrite_pp_wasmimmutablefields = this.readBeforeWrite_pp_wasmimmutablefields + 1
  val i: Int = this.effectivelyFinalField_pp_wasmimmutablefields
  this.compoundAssignment_pp_wasmimmutablefields = this.compoundAssignment_pp_wasmimmutablefields + 1
  if (i == 3) {
   this.effectivelyFinalButNotOptimizedIfBranches_pp_wasmimmutablefields = 1
  } else {
   this.effectivelyFinalButNotOptimizedIfBranches_pp_wasmimmutablefields = 1
  }
  this.effectivelyFinalButNotOptimizedNestedBlock_pp_wasmimmutablefields = 1
  this.writtenInInitAndConstructor_pp_wasmimmutablefields = 1
 }

 constructor(x: Int): this() {
  val i: Int = this.effectivelyFinalField_pp_wasmimmutablefields
  this.writtenInDelegatingConstructor_pp_wasmimmutablefields = 1
  this.writtenOnlyInDelegatingConstructor_pp_wasmimmutablefields = 1
  this.writtenInInitializerAndInDelegatingConstructor_pp_wasmimmutablefields = 1
 }

 open fun foo_pp_wasmimmutablefields() {
  val o: FinalizerTest? = null
  o!!.writtenOutsideConstructor_pp_wasmimmutablefields = 1
  val i: Int = this.effectivelyFinalField_pp_wasmimmutablefields
 }
}
