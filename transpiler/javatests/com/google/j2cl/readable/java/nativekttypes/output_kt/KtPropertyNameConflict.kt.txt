// Generated from "nativekttypes/KtPropertyNameConflict.java"
@file:OptIn(ExperimentalObjCName::class)

package nativekttypes

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName
import nativekttypes.KtPropertyNameConflict

@ObjCName("NativekttypesKtPropertyNameConflict", exact = true)
abstract class KtPropertyNameConflict {
 @JvmField var fieldWithConflictingGetter_ktPropertyConflict: Int = 0

 @JvmField var fieldWithConflictingNonGetter_ktPropertyConflict: Int = 0

 @JvmField var fieldWithConflictingRenamedMethod_ktPropertyConflict: Int = 0

 open val fieldWithConflictingGetter: Int get() {
  return this.fieldWithConflictingGetter_ktPropertyConflict
 }

 open val fieldWithConflictingNonGetter: Int get() {
  return this.fieldWithConflictingNonGetter_ktPropertyConflict
 }

 open val fieldWithConflictingRenamedMethod: Int get() {
  return this.fieldWithConflictingRenamedMethod_ktPropertyConflict
 }

 open val fieldWithConflictingSuperMethod: Int get() {
  return 0
 }

 companion object {
  @JvmStatic
  fun test(
   @ObjCName("withNativekttypesKtPropertyNameConflict", exact = false) o: KtPropertyNameConflict?,
   @ObjCName("withNativekttypesKtPropertyNameConflict_Interface", exact = false) i: KtPropertyNameConflict.Interface?
  ) {
   val fieldWithConflictingGetter: Int = o!!.fieldWithConflictingGetter_ktPropertyConflict
   val conflictingGetter: Int = o!!.fieldWithConflictingGetter
   val fieldWithConflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter_ktPropertyConflict
   val conflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter
   val fieldWithConflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod_ktPropertyConflict
   val conflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod
   val conflictingSuperMethod: Int = o!!.fieldWithConflictingSuperMethod
   val conflictingInterfaceMethod: Int = i!!.fieldWithConflictingInterfaceMethod
  }

  @JvmStatic
  fun test(
   @ObjCName("withNativekttypesKtPropertyNameConflict_Subclass", exact = false) o: KtPropertyNameConflict.Subclass?
  ) {
   val fieldWithConflictingGetter: Int = o!!.fieldWithConflictingGetter_ktPropertyConflict
   val conflictingGetter: Int = o!!.fieldWithConflictingGetter
   val fieldWithConflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter_ktPropertyConflict
   val conflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter
   val fieldWithConflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod_ktPropertyConflict
   val conflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod
   val fieldWithConflictingSuperMethod: Int = o!!.fieldWithConflictingSuperMethod_pp_nativekttypes
   val conflictingSuperMethod: Int = o!!.fieldWithConflictingSuperMethod
   val fieldWithConflictingInterfaceMethod: Int = o!!.fieldWithConflictingInterfaceMethod_pp_nativekttypes
   val conflictingInterfaceMethod: Int = o!!.fieldWithConflictingInterfaceMethod
  }
 }

 @ObjCName("NativekttypesKtPropertyNameConflict_Interface", exact = true)
 interface Interface {
  val fieldWithConflictingInterfaceMethod: Int
 }

 @ObjCName("NativekttypesKtPropertyNameConflict_Subclass", exact = true)
 abstract inner class Subclass: KtPropertyNameConflict(), KtPropertyNameConflict.Interface {
  @JvmField var fieldWithConflictingSuperMethod_pp_nativekttypes: Int = 0

  @JvmField var fieldWithConflictingInterfaceMethod_pp_nativekttypes: Int = 0

  open override val fieldWithConflictingInterfaceMethod: Int get() {
   return this.fieldWithConflictingInterfaceMethod_pp_nativekttypes
  }
 }
}
